/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  FileUploadHandler,
} from './components/file-upload/FileUploadHandler';
import {
  NotiMessageProps,
} from './components/notifications/status-type';
import {
  SvgPack,
} from './components/svg/svgs';

export namespace Components {
  interface OuiCard {}
  interface OuiCardHeading {}
  interface OuiDocumentsIcon {
    'isAnimating': boolean;
    'isFannedOut': boolean;
    'isHighlighted': boolean;
  }
  interface OuiFileUpload {
    /**
    * Specify mime types to accept (unrestricted by default) Separate by spaces for multiple: `text/html text/xml`
    */
    'accept': string;
    /**
    * Specify a label for the button.
    */
    'btnLabel': string;
    /**
    * Specify a title for the modal.
    */
    'modalTitle': string;
  }
  interface OuiModal {}
  interface OuiNavBar {}
  interface OuiNotiButton {
    /**
    * Number of unread notifications
    */
    'count': number;
    /**
    * Set the noti-try status icon
    */
    'icon': string;
  }
  interface OuiNotiDrawer {
    /**
    * Messages array
    */
    'messages': NotiMessageProps[];
  }
  interface OuiNotiItem {
    /**
    * A single noti message
    */
    'message': NotiMessageProps;
  }
  interface OuiNotiTray {
    'messages': NotiMessageProps[];
    'opened': boolean;
  }
  interface OuiSvg {
    'name': SvgPack;
    'scale': number;
  }
  interface OuiTmSwitch {}
}

declare global {


  interface HTMLOuiCardElement extends Components.OuiCard, HTMLStencilElement {}
  var HTMLOuiCardElement: {
    prototype: HTMLOuiCardElement;
    new (): HTMLOuiCardElement;
  };

  interface HTMLOuiCardHeadingElement extends Components.OuiCardHeading, HTMLStencilElement {}
  var HTMLOuiCardHeadingElement: {
    prototype: HTMLOuiCardHeadingElement;
    new (): HTMLOuiCardHeadingElement;
  };

  interface HTMLOuiDocumentsIconElement extends Components.OuiDocumentsIcon, HTMLStencilElement {}
  var HTMLOuiDocumentsIconElement: {
    prototype: HTMLOuiDocumentsIconElement;
    new (): HTMLOuiDocumentsIconElement;
  };

  interface HTMLOuiFileUploadElement extends Components.OuiFileUpload, HTMLStencilElement {}
  var HTMLOuiFileUploadElement: {
    prototype: HTMLOuiFileUploadElement;
    new (): HTMLOuiFileUploadElement;
  };

  interface HTMLOuiModalElement extends Components.OuiModal, HTMLStencilElement {}
  var HTMLOuiModalElement: {
    prototype: HTMLOuiModalElement;
    new (): HTMLOuiModalElement;
  };

  interface HTMLOuiNavBarElement extends Components.OuiNavBar, HTMLStencilElement {}
  var HTMLOuiNavBarElement: {
    prototype: HTMLOuiNavBarElement;
    new (): HTMLOuiNavBarElement;
  };

  interface HTMLOuiNotiButtonElement extends Components.OuiNotiButton, HTMLStencilElement {}
  var HTMLOuiNotiButtonElement: {
    prototype: HTMLOuiNotiButtonElement;
    new (): HTMLOuiNotiButtonElement;
  };

  interface HTMLOuiNotiDrawerElement extends Components.OuiNotiDrawer, HTMLStencilElement {}
  var HTMLOuiNotiDrawerElement: {
    prototype: HTMLOuiNotiDrawerElement;
    new (): HTMLOuiNotiDrawerElement;
  };

  interface HTMLOuiNotiItemElement extends Components.OuiNotiItem, HTMLStencilElement {}
  var HTMLOuiNotiItemElement: {
    prototype: HTMLOuiNotiItemElement;
    new (): HTMLOuiNotiItemElement;
  };

  interface HTMLOuiNotiTrayElement extends Components.OuiNotiTray, HTMLStencilElement {}
  var HTMLOuiNotiTrayElement: {
    prototype: HTMLOuiNotiTrayElement;
    new (): HTMLOuiNotiTrayElement;
  };

  interface HTMLOuiSvgElement extends Components.OuiSvg, HTMLStencilElement {}
  var HTMLOuiSvgElement: {
    prototype: HTMLOuiSvgElement;
    new (): HTMLOuiSvgElement;
  };

  interface HTMLOuiTmSwitchElement extends Components.OuiTmSwitch, HTMLStencilElement {}
  var HTMLOuiTmSwitchElement: {
    prototype: HTMLOuiTmSwitchElement;
    new (): HTMLOuiTmSwitchElement;
  };
  interface HTMLElementTagNameMap {
    'oui-card': HTMLOuiCardElement;
    'oui-card-heading': HTMLOuiCardHeadingElement;
    'oui-documents-icon': HTMLOuiDocumentsIconElement;
    'oui-file-upload': HTMLOuiFileUploadElement;
    'oui-modal': HTMLOuiModalElement;
    'oui-nav-bar': HTMLOuiNavBarElement;
    'oui-noti-button': HTMLOuiNotiButtonElement;
    'oui-noti-drawer': HTMLOuiNotiDrawerElement;
    'oui-noti-item': HTMLOuiNotiItemElement;
    'oui-noti-tray': HTMLOuiNotiTrayElement;
    'oui-svg': HTMLOuiSvgElement;
    'oui-tm-switch': HTMLOuiTmSwitchElement;
  }
}

declare namespace LocalJSX {
  interface OuiCard {}
  interface OuiCardHeading {}
  interface OuiDocumentsIcon {
    'isAnimating'?: boolean;
    'isFannedOut'?: boolean;
    'isHighlighted'?: boolean;
  }
  interface OuiFileUpload {
    /**
    * Specify mime types to accept (unrestricted by default) Separate by spaces for multiple: `text/html text/xml`
    */
    'accept'?: string;
    /**
    * Specify a label for the button.
    */
    'btnLabel'?: string;
    /**
    * Specify a title for the modal.
    */
    'modalTitle'?: string;
    /**
    * Files dropped onto page, and validated. You can use this event to perform an upload in javscript
    */
    'onDropped'?: (event: CustomEvent<FileUploadHandler>) => void;
  }
  interface OuiModal {
    /**
    * Emitted when modal is closed via button or esc
    */
    'onClose'?: (event: CustomEvent<any>) => void;
  }
  interface OuiNavBar {}
  interface OuiNotiButton {
    /**
    * Number of unread notifications
    */
    'count'?: number;
    /**
    * Set the noti-try status icon
    */
    'icon'?: string;
  }
  interface OuiNotiDrawer {
    /**
    * Messages array
    */
    'messages'?: NotiMessageProps[];
  }
  interface OuiNotiItem {
    /**
    * A single noti message
    */
    'message'?: NotiMessageProps;
  }
  interface OuiNotiTray {
    'messages'?: NotiMessageProps[];
    'opened'?: boolean;
  }
  interface OuiSvg {
    'name'?: SvgPack;
    'scale'?: number;
  }
  interface OuiTmSwitch {}

  interface IntrinsicElements {
    'oui-card': OuiCard;
    'oui-card-heading': OuiCardHeading;
    'oui-documents-icon': OuiDocumentsIcon;
    'oui-file-upload': OuiFileUpload;
    'oui-modal': OuiModal;
    'oui-nav-bar': OuiNavBar;
    'oui-noti-button': OuiNotiButton;
    'oui-noti-drawer': OuiNotiDrawer;
    'oui-noti-item': OuiNotiItem;
    'oui-noti-tray': OuiNotiTray;
    'oui-svg': OuiSvg;
    'oui-tm-switch': OuiTmSwitch;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'oui-card': LocalJSX.OuiCard & JSXBase.HTMLAttributes<HTMLOuiCardElement>;
      'oui-card-heading': LocalJSX.OuiCardHeading & JSXBase.HTMLAttributes<HTMLOuiCardHeadingElement>;
      'oui-documents-icon': LocalJSX.OuiDocumentsIcon & JSXBase.HTMLAttributes<HTMLOuiDocumentsIconElement>;
      'oui-file-upload': LocalJSX.OuiFileUpload & JSXBase.HTMLAttributes<HTMLOuiFileUploadElement>;
      'oui-modal': LocalJSX.OuiModal & JSXBase.HTMLAttributes<HTMLOuiModalElement>;
      'oui-nav-bar': LocalJSX.OuiNavBar & JSXBase.HTMLAttributes<HTMLOuiNavBarElement>;
      'oui-noti-button': LocalJSX.OuiNotiButton & JSXBase.HTMLAttributes<HTMLOuiNotiButtonElement>;
      'oui-noti-drawer': LocalJSX.OuiNotiDrawer & JSXBase.HTMLAttributes<HTMLOuiNotiDrawerElement>;
      'oui-noti-item': LocalJSX.OuiNotiItem & JSXBase.HTMLAttributes<HTMLOuiNotiItemElement>;
      'oui-noti-tray': LocalJSX.OuiNotiTray & JSXBase.HTMLAttributes<HTMLOuiNotiTrayElement>;
      'oui-svg': LocalJSX.OuiSvg & JSXBase.HTMLAttributes<HTMLOuiSvgElement>;
      'oui-tm-switch': LocalJSX.OuiTmSwitch & JSXBase.HTMLAttributes<HTMLOuiTmSwitchElement>;
    }
  }
}


